# Import the sys module to access command-line arguments
import sys

# Import the hashlib module to work with hash functions
import hashlib

# Define a function to calculate the MD5 hash of a given file
def calculate_md5(file_path):
    # Create an MD5 hash object
    hasher = hashlib.md5()
    # Open the file in binary mode for reading
    with open(file_path, 'rb') as file:
        # Read the entire content of the file into memory
        buf = file.read()
        # Update the hash object with the file content
        hasher.update(buf)
    # Return the hexadecimal representation of the hash
    return hasher.hexdigest()

# Define a function to calculate the SHA1 hash of a given file
def calculate_sha1(file_path):
    # Similar to calculate_md5 but creates a SHA1 hash object
    hasher = hashlib.sha1()
    with open(file_path, 'rb') as file:
        buf = file.read()
        hasher.update(buf)
    return hasher.hexdigest()

# Define a function to calculate the SHA256 hash of a given file
def calculate_sha256(file_path):
    # Similar to calculate_md5 but creates a SHA256 hash object
    hasher = hashlib.sha256()
    with open(file_path, 'rb') as file:
        buf = file.read()
        hasher.update(buf)
    return hasher.hexdigest()

# Define a function to calculate the SHA512 hash of a given file
def calculate_sha512(file_path):
    # Similar to calculate_md5 but creates a SHA512 hash object
    hasher = hashlib.sha512()
    with open(file_path, 'rb') as file:
        buf = file.read()
        hasher.update(buf)
    return hasher.hexdigest()

# Main execution block
if __name__ == "__main__":
    # Access the first command-line argument passed to the script
    file_path = sys.argv[1]
    # Dictionary to store the calculated hashes
    hashes = {
        # Using tab characters for indentation in the output
        "\tMD5": calculate_md5(file_path),
        "\tSHA1": calculate_sha1(file_path),
        "\tSHA256": calculate_sha256(file_path),
        "\tSHA512": calculate_sha512(file_path)
    }
    # Join the dictionary items into a single string, separating keys and values with colons
    # and joining each item with a newline character
    print("\n".join([f"{key}: {value}" for key, value in hashes.items()]))