# Import the sys module to access command-line arguments
import sys

# Import necessary PyQt5 widgets for creating the GUI
from PyQt5.QtWidgets import QApplication, QWidget, QVBoxLayout, QPushButton, QLabel, QFileDialog, QTextEdit

# Import subprocess module to execute shell commands
import subprocess

# Define a custom widget class inheriting from QWidget
class PESTudioHeaderInfo(QWidget):
    def __init__(self):
        # Initialize the parent class
        super().__init__()
        # Call the UI initialization method
        self.initUI()

    def initUI(self):
        # Set the window title
        self.setWindowTitle('Static Malware Analyzer')
        # Create a vertical box layout
        layout = QVBoxLayout()

        # Create a button to browse for an executable file
        self.selectButton = QPushButton('Browse Executable', self)
        # Connect the button click event to the browseFile method
        self.selectButton.clicked.connect(self.browseFile)

        # Create a read-only text edit widget to display results
        self.resultText = QTextEdit()
        self.resultText.setReadOnly(True)

        # Add the button and text edit to the layout
        layout.addWidget(self.selectButton)
        layout.addWidget(self.resultText)

        # Apply the layout to the widget
        self.setLayout(layout)
        # Set the geometry of the widget
        self.setGeometry(100, 100, 1200, 800)

    def browseFile(self):
        # Configure options for the file dialog
        options = QFileDialog.Options()
        # Get the file name from the file dialog
        fileName, _ = QFileDialog.getOpenFileName(self, "QFileDialog.getOpenFileName()", "", "Executable Files (*.exe);;All Files (*)", options=options)
        # If a file is selected, display its header info
        if fileName:
            self.displayPestudioHeaderInfo(fileName)

    def displayPestudioHeaderInfo(self, filePath):
        # Paths to the PESTudio and hash calculation scripts
        scriptPath = r'D:\College\Third Squad\Second Term\Introduction to Malware Analysis\Final Project\Tools\pestudio-cli-master\pestudio.py'
        scriptPath2 = r'D:\College\Third Squad\Second Term\Introduction to Malware Analysis\Final Project\Tools\pestudio-cli-master\calculate_hashes.py'
        
        # Commands to execute PESTudio analysis and hash calculations
        command1 = ['python', scriptPath2, filePath]  # Calculate hashes
        command2 = ['python', scriptPath, '-f', filePath, '--virusTotal']  # VirusTotal scan
        command3 = ['python', scriptPath, '-f', filePath, '--header']  # Header info
        command4 = ['python', scriptPath, '-f', filePath, '--imports']  # Imports
        command5 = ['python', scriptPath, '-f', filePath, '--exports']  # Exports
        command6 = ['python', scriptPath, '-f', filePath, '--resources']  # Resources
        command7 = ['python', scriptPath, '-f', filePath, '--relocations']  # Relocations
        command8 = ['python', scriptPath, '-f', filePath, '--signatures']  # Signatures
        command9 = ['python', scriptPath, '-f', filePath, '--strings']  # Strings
        command10 = ['python', scriptPath, '-f', filePath, '--urls']  # URLs

        # Try to execute the commands and capture their outputs
        try:
            # Execute each command and capture its output
            output1 = subprocess.check_output(command1, stderr=subprocess.STDOUT, universal_newlines=True)
            output2 = subprocess.check_output(command2, stderr=subprocess.STDOUT, universal_newlines=True)
            output3 = subprocess.check_output(command3, stderr=subprocess.STDOUT, universal_newlines=True)
            output4 = subprocess.check_output(command4, stderr=subprocess.STDOUT, universal_newlines=True)
            output5 = subprocess.check_output(command5, stderr=subprocess.STDOUT, universal_newlines=True)
            output6 = subprocess.check_output(command6, stderr=subprocess.STDOUT, universal_newlines=True)
            output7 = subprocess.check_output(command7, stderr=subprocess.STDOUT, universal_newlines=True)
            output8 = subprocess.check_output(command8, stderr=subprocess.STDOUT, universal_newlines=True)
            output9 = subprocess.check_output(command9, stderr=subprocess.STDOUT, universal_newlines=True)
            output10 = subprocess.check_output(command10, stderr=subprocess.STDOUT, universal_newlines=True)
            
            # Concatenate the outputs and display them in the text edit
            self.resultText.setText(
                "Calculates The Different Hashes For the Executable File: \n\n"
                + output1 + "\n\n"
                + output2 + "\n\n"
                + output3 + "\n\n"
                + "Check the imports against known malicious functions: \n\n"
                + output4 + "\n\n"
                + "Show the exports of the binary: \n\n"
                + output5 + "\n\n"
                + "Check the resources for blacklisted values: \n\n"
                + output6 + "\n\n"
                + output7 + "\n\n"
                + "Check for known signatures (e.g. packers): \n\n"
                + output8 + "\n\n"
                + output9 + "\n\n"
                + "List all URLs found in the PE file: \n\n"
                + output10
            )
        except subprocess.CalledProcessError as e:
            # Handle errors during command execution
            self.resultText.setText(f"Error executing PESTudio CLI: {e.output}")

# Entry point of the application
if __name__ == '__main__':
    # Create a QApplication instance
    app = QApplication(sys.argv)
    # Create an instance of the custom widget
    ex = PESTudioHeaderInfo()
    # Show the widget
    ex.show()
    # Start the application's event loop
    sys.exit(app.exec_())